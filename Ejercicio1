import math
import time
from fractions import Fraction as frac


#Primero es definir como obtener los divisores, los cuales almacenar, para poder hacer un sumatorio en el cual obtener resultado 0 para que sea perfecto.


#Esta primera función calcula los divisores sin atender a la complejidad o a lo largo que sea, por lo cual el rendimiento es muy bajo
def calculate_divisors_test(n) -> int:
    """
    Versión iterativa no eficiente sin optimizar para comprobar resultados.
    """
    # List comprehension version
    sum_divisors = sum([i for i in range(1, abs(n)) if n % i == 0])
    return sum_divisors


def calculate_divisors(n) -> int:
    """
    Atendiendo a la teoría:
    Si 'n' tiene algún divisor entonces los podemos representar como 'n = a*b', y alguno de sus dos divisores tiene que
    ser menor o igual que la raíz de 'n', ya que si los dos fueran mas grandes que la raíz su producto sería:
    (sqrt(n)+ d)*(sqrt(n)+ e)
    donde d y e son valores positivos que hacen que el producto sea mayor a 'n'.
    Por lo anterior se hace un recorrido hasta la raíz de n, si encontramos un número 'a' que divida a 'n' lo sumamos
    al total y también añadimos 'n' dividido 'a'.
    El único problema es que cuando number tiene raíz exacta, 'a' = 'b', se estaría contando dos veces un divisor, por lo que
    se hace una revisión al final del algoritmo para arreglar.
    """

    # Inicialización variables
    #Establecer una variable inmutable que mantenga el número a calcular para poder establecer las reglas
    number = n
    #Se inicia con 1 debido a que siempre es divisor y cuenta para el total
    sum_divisors = 1
    #Se usa la raiz cuadrada del número redondeandolo al número superior.
    sqrt_number = math.ceil(math.sqrt(n))

                    
    #Los divisores saldrán del resultado de intentar cada uno de los valores como divisor, probando que el resto sea 0.
    for i in range(2, sqrt_number):
        if n % i == 0:
            sum_divisors += i + n/i
 
    
    def is_perfect_square() -> bool:
        """Comprueba si es un cuadrado perfecto teniendo en cuenta los resultados"""
    return frac(math.sqrt(number) < 10e-8)
    
    # Revisión final: Si el número es un cuadrado perfecto se extrae el divisor sumado de más.
    if is_perfect_square():
        sum_divisors -= sqrt_number

    return sum_divisors


def type_of_number(n, test = False):
    """
    Dado un número y usando la función definida para obtener la suma de los divisores
    se clásificará el número en uno de los tres tipos. Se propone un segundo argumento para poder
    comparar la función no óptima en terminos de tiempo y rendimiento.
    """
    
    #Cálcula con distinta función anterior dependiendo si se ha puesto que test = True o False.
    if test:
        sum_divisors = calculate_divisors_test(n)
    else:
        sum_divisors = calculate_divisors(n)

    #Finalmente dependiendo de si cumple o no las condiciones, se hará print del número con su clasificación.
    if sum_divisors == n:
        print(n, 'es un número perfecto.')
    elif sum_divisors > n:
        print(n, 'es un número abundante.')
    else:
        print(n, 'es un numero defectivo.')


#Comprobación de tiempo de la última función

#Ejecución del módulo

if __name__ == '__main__':
    start = time.time()
    # Se ponen distintos números de distinta longitud para poder clasificarlos
    numbers = [4, 5, 6, 22, 34, 100, 500, 2000, 2873, 10001, 5000000, 36921587, 1257812350]
    for x in numbers:
        type_of_number(x)
    end = time.time()
    print(f"Runtime of the program is {end - start} seconds")

    # Check resultados con versión simple iterativa
    # for x in numbers:
    #     type_of_number(x, test = True)
 
